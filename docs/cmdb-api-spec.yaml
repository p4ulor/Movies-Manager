openapi: 3.0.1
info:
  title: Chelas Movies DataBase
  description: "An API that obtains movies from the IMDB API and manages user's and the groups of movies made by the users (their movie lists)"
  termsOfService: http://swagger.io/terms/
  version: 1.0.0
tags:
  - name: Users
    description: Describes sign up operation
  - name: Login
    description:  Describes login operation
  - name: Movies
    description:  Describes the listing of top 250 movies (max) and the information data about a specific movie operations
  - name: Groups
    description: Describes the operations needed to support the Groups section. Listing, Creation, Update and Delete operations on groups and Adding and Deletion of a movie from a group's list. 

paths:
  /users:
    post:
      tags:
        - Users
      summary: Creates a new user
      requestBody:
        description: Required information for sign up
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingField'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                description: Application error
                properties:
                  error:
                    type: string
                    description: The returned error
                    example: "Wrong password"                               
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                description: Application error
                properties:
                  error:
                    type: string
                    description: The returned error
                    example: "There's already a user with that name={Name}"
                    
  /login:
    post:
      tags:
        - Login
      summary: Uses authentication credentials to get the user's token
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogIn'
      responses:
        200:
          description: Returns token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        401:
          description: Password error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'                
  
  /movies/top:
    get:
      tags:
        - Movies
      summary: Returns a list of the Top 250 popular movies
      parameters:
        - name: top
          in: path
          description: the list limit (max. 250)
          required: true
          schema:
            type: integer
          example: 3
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Top250Data'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingParam'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF' 
                
  /movies/{searchTerms}{limit}:
    get:
      tags:
        - Movies
      summary: Returns the search by movie's name
      parameters:
        - name: searchTerms
          in: path
          description: the name to search
          required: true
          schema:
            type: string
          example: "Valq"
        - name: limit
          in: path
          description: the list limit (max. 250)
          required: true
          schema:
            type: integer
          example: 5
      responses:
        200:
          description: Returns the search by movie's name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchMovies'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingParam'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF' 
                
  /groups:
    post:
      tags:
        - Groups
      summary: Creates a new Group
      requestBody:
        description: Required information for creating a new group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        200:
          description: Returns the id of the new created group.
          content:
            application/json:
              schema:
                type: object
                description: Response with the group's id
                properties:
                  id:
                    type: string
                    format: integer
                    description: the group's id
                    example: 3
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGroupNameEmpty'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF'                  
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                description: Application error
                properties:
                  error:
                    type: string
                    description: The returned error
                    example: "There's already a group with that name={Name}"

  /groups/{groupID}:
    get:
      tags:
        - Groups
      summary: Returns detail of a Group
      parameters:
        - name: groupID
          in: path
          description: the Group's ID to return the details of
          required: true
          schema:
            type: integer
            example: 5
      responses:
        200:
          description: Returns a user's group detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetailResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingParam'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'   
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF' 
                
    post:
      tags:
        - Groups
      summary: Updates a Group
      parameters:
        - name: groupID
          in: path
          description: the Group's ID to update
          required: true
          schema:
            type: integer
            example: 5
      requestBody:
        description: Required information for updating a group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        200:
          description: Returns only the status code

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGroupNameEmpty'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF' 
                
    delete:
      tags:
        - Groups
      summary: Deletes a Group
      parameters:
        - name: groupID
          in: path
          description: the group's identification to be deleted
          required: true
          schema:
            type: integer
            example: 5
      responses:
        200:
          description: Response with the information of group's deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGroupResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingGroupID'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF'               
                
  /groups{limit}:
    get:
      tags:
        - Groups
      summary: Returns a list of Groups of a User
      parameters:
        - name: limit
          in: path
          description: the list limit (max. 50)
          required: true
          schema:
            type: integer
          example: 5
      responses:
        200:
          description: Returns a user's group list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfGroupResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingParam'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF' 

  /groups/{groupID}/{movieID}:
    put:
      tags:
        - Groups
      summary: Adds a Movie to a Group
      parameters:
        - name: groupID
          in: path
          description: the group identification
          required: true
          schema:
            type: string
          example: "bTNrM4YBv9VMiSnF9NuU"
        - name: movieID
          in: path
          description: the movie identification
          required: true
          schema:
            type: string
          example: "tt0443453"

      responses:
        200:
          description: Returns the information of the added movie.
          content:
            application/json:
              schema:
                type: object
                description: Response with message
                properties:
                  msg:
                    type: string
                    description: the name of the added movie
                    example: "Added movie -> {movieName}"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingParam'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'       
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF'  
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMovieAlreadyExist'
    delete:
      tags:
        - Groups
      summary: Removes a Movie from a Group
      responses:
        200:
          description: Returns token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveMovieGroupResponse'   
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMissingGroupID'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotLogIn'                 
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserNF' 
                
components:
  schemas:
    ErrorUserNF:
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "User not found"

    ErrorNotLogIn:
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "You are not logged in / You have no authorization to perform this action"
          
    ErrorMissingField:
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "Missing field -> {Field}"   
          
    ErrorGroupNameEmpty:
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "Group name must be a non-empty string"
          
    ErrorMissingParam:    
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "Path param {Name} is missing"
          
    ErrorMissingGroupID:    
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "Group with id {groupID} not found"
          
    ErrorMovieAlreadyExist:    
      type: object
      description: Application error
      properties:
        error:
          type: string
          description: The returned error
          example: "You already have that movie in the list"
    
    AppError:
      type: object
      description: Application error
      required:
        - code
        - name
        - message
      properties:
        code:
          type: number
          format: integer
          description: HTTP Error code
          example: 4**
        name:
          type: string
          description: HTTP Error name
          example: Client Error name
        message:
          type: string
          description: Error description message
          example: An error occurred

    UserSignUpRequest:
      description: Required info for a user sign up
      required:
        - name
        - password
        - api_key
      properties:
        name:
          type: string
          description: the user's name
          example: Filipe
        password:
          type: string
          description: the user's password (which will be hashed)
          example: strongpass
        api_key:
          type: string
          description: the client API key
          example: e8d234ssr

    UserLogIn:
      description: Information for user authentication
      required:
        - name
        - password
      properties:
        name:
          type: string
          description: the user's name
          example: Filipe
        password:
          type: string
          description: the user's password (which will be hashed)
          example: strongpass

    UpdateGroupRequest:
      description: Update Details of a Group
      required:
         - groupName
         - groupDescription
      properties:
        groupName:
          type: string
          description: the group's name to update
          example: "Last seen"
        groupDescription:
          type: string
          description: the group's description to update
          example: "Of action films"
          
    UserTokenResponse:
      type: object
      description: Response with the user's id and token
      properties:
        userID:
          type: string
          description: the user token
          example: 2
        token:
          type: string
          description: the user token
          example: "061bebd1-0d4b-43e4-b2d2-34f1be9e0cab"

        
    DeleteGroupResponse:
      type: object
      description: Group deletion message
      properties:
        msg:
          type: string
          description: Message 
          example: "Deleted group w/ id -> {groupID} from user -> {userName} "
          
    RemoveMovieGroupResponse:
      type: object
      description: Remove Movie from Group
      properties:
        msg:
          type: string
          description: Message 
          example: "Deleted movie -> {movieName}} from group -> {groupName}"

    GroupDetailResponse:
      type: object
      description: Group detail
      required:
        - id
        - name
        - description
        - isPrivate
        - movies
        - totalDuration
      properties:
        id:
          type: string
          format: integer
          description: Group's ID
          example: 1
        groupObj:
          type: object
          description: Movies information
          required:
            - name
            - description
            - isPrivate
            - movies
            - totalDuration
          properties:
            name:
              type: string
              description: Group's name
              example: watch later
            description:
              type: string
              description: Group's description
              example: No time
            isPrivate:
              type: boolean
              description: Group's privacy
              example: true
            movies:
              type: array
              items:
                type: object
                description: Movies information
                required:
                  - id
                  - name
                  - duration
                properties:
                  id:
                    type: string
                    description: The movie's ID
                    example: tt0120663        
                  name:
                    type: string
                    description: The movie's name
                    example: Eyes Wide Shut                            
                  duration:
                    type: number
                    format: integer
                    description: Duration (min) of the movie
                    example: 159
            totalDuration:
              type: number
              format: integer
              description: Total duration (min) of movies in group
              example: 159        
          
    ListOfGroupResponse:
      type: object
      description: Group detail
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            description: Group information
            required:
              - id
              - name
            properties:
              id:
                type: string
                description: The group's ID
                example: 1
              name:
                type: string
                description: The group's name
                example: "watch in 1 year"
    
    Top250Data:
      type: object
      description: Response with the list of most popular Movies
      properties:
        top:
          type: array
          items:
            type: object
            description: Movies information
            required:
              - id
              - rank
              - name
            properties:
              id:
                type: string
                description: The movie's ID
                example: tt0111161              
              rank:
                type: string
                format: integer
                description: The rank of the movie
                example: 1
              name:
                type: string
                description: The movie's name
                example: The Shawshank Redemption
                
    SearchMovies:
      type: object
      description: Response with the list resulting from a search of a string
      properties:
        found:
          type: array
          items:
            type: object
            description: Movies information
            required:
              - id
              - title
            properties:
              id:
                type: string
                description: The movie's ID
                example: tt6289132              
              title:
                type: string
                description: The movie's name
                example: The Boulet Brothers' Dragula

    CreateGroupRequest:
      description: Required info for creating a Group
      required:
        - name
        - descriptioon
        - isPrivate
      properties:
        name:
          type: string
          description: the group's name
          example: Already seen
        descriptioon:
          type: string
          description: the group's description
          example: In all my life
        isPrivate:
          type: boolean
          description: privacy of the group 
          example: true   